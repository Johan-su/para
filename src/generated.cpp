# 1 "../src/meta.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 386 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "../src/meta.cpp" 2
# 55 "../src/meta.cpp"
enum NodeType { NODE_INVALID, NODE_PROGRAM, NODE_STATEMENT, NODE_NUMBER, NODE_FUNCTION, NODE_FUNCTIONDEF, NODE_VARIABLE, NODE_VARIABLEDEF, NODE_ADD, NODE_SUB, NODE_MUL, NODE_DIV, NODE_UNARYADD, NODE_UNARYSUB, NODE_OPENPAREN, };
# 65 "../src/meta.cpp"
const char *str_NodeType[] = { "NODE_INVALID", "NODE_PROGRAM", "NODE_STATEMENT", "NODE_NUMBER", "NODE_FUNCTION", "NODE_FUNCTIONDEF", "NODE_VARIABLE", "NODE_VARIABLEDEF", "NODE_ADD", "NODE_SUB", "NODE_MUL", "NODE_DIV", "NODE_UNARYADD", "NODE_UNARYSUB", "NODE_OPENPAREN", };
# 74 "../src/meta.cpp"
enum TokenType_BIT_POS { TOKEN_INVALID_BIT_POS, TOKEN_NUMBER_BIT_POS, TOKEN_IDENTIFIER_BIT_POS, TOKEN_EQUAL_BIT_POS, TOKEN_SEMICOLON_BIT_POS, TOKEN_COLON_BIT_POS, TOKEN_COMMA_BIT_POS, TOKEN_PLUS_BIT_POS, TOKEN_MINUS_BIT_POS, TOKEN_STAR_BIT_POS, TOKEN_SLASH_BIT_POS, TOKEN_OPENPAREN_BIT_POS, TOKEN_CLOSEPAREN_BIT_POS, };
# 83 "../src/meta.cpp"
enum TokenType { TOKEN_INVALID = 1 << TOKEN_INVALID_BIT_POS, TOKEN_NUMBER = 1 << TOKEN_NUMBER_BIT_POS, TOKEN_IDENTIFIER = 1 << TOKEN_IDENTIFIER_BIT_POS, TOKEN_EQUAL = 1 << TOKEN_EQUAL_BIT_POS, TOKEN_SEMICOLON = 1 << TOKEN_SEMICOLON_BIT_POS, TOKEN_COLON = 1 << TOKEN_COLON_BIT_POS, TOKEN_COMMA = 1 << TOKEN_COMMA_BIT_POS, TOKEN_PLUS = 1 << TOKEN_PLUS_BIT_POS, TOKEN_MINUS = 1 << TOKEN_MINUS_BIT_POS, TOKEN_STAR = 1 << TOKEN_STAR_BIT_POS, TOKEN_SLASH = 1 << TOKEN_SLASH_BIT_POS, TOKEN_OPENPAREN = 1 << TOKEN_OPENPAREN_BIT_POS, TOKEN_CLOSEPAREN = 1 << TOKEN_CLOSEPAREN_BIT_POS, };
